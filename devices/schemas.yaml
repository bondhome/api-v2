Device:
  properties:
    name:
      example: My Fan
      type: string
    type:
      description: |
        - `CF` : Ceiling Fan
        - `FP` : Fireplace
        - `MS` : Motorized Window Coverings (Shades, Screens, Drapes) and Awnings
        - `GX` : Generic device
        - `LT` : Light
        - `BD` : Bidet
        
        This `type` field does not impact the functionality of the device.
        The `type` field should be used by API clients to improve the user experience.
        For example, the Bond Home app uses this field to determine what icon to show
        when browsing a list of Devices on the Bridge.
        
        The `type` field *may* be used by integrations to determine the category of interface to be selected
        when such a selection is mandated by the platform. For example, Google Assistant integration
        requires developers to choose a device type such as Fan or Light.
        however we strongly encourage developers to implement the functional aspects of integrations based on
        Features (i.e., available Actions, State variables, and Properties).
      example: "CF"
      type: string
    subtype:
      description: |
        [Added in v2.21]
        
        The subtype field is used to distinguish between categories of devices sublter than the `type` field permits.
        
        Currently, subtype is only used for Motorized Window Coverings and Awnings (`type = MS`), with the following options:
        
         - `ROLLER`: a roller blackout shade which blocks light and provides privacy
         - `SHEER`: a shade which permits light to pass and does not provide privacy
         - `AWNING`: an outdoor patio covering
         
        This field does not impact functionality in any way.
        Furthermore, the `subtype` field must only be used for analytics and aesthetic purposes by the API client.
        New subtypes may be introduced without notice. API clients should always be prepared to fall back to a reasonable
        default based on the device `type`.
         
        The `subtype` field is not limited by the firmware, but rather specified by Bond internally and included
        in Device creation requests from the Bond Home app.
        
        WARNING: Although currently it is not the case, at some point the same `subtype` string may be re-used with 
        different meanings between different device `types`. To take a hypothetical example, we may have a gas-powered
        fireplace device (`type = FP, subtype = GAS`) but also a gas-powered bidet (`type = BD, subtype = GAS`).
      example: "AWNING"
      type: string
    template:
      description: |
        An internal name describing what sort of protocol the remote represented
        by the device implements. Upon a POST with a valid template string, the
        device self-populates its panel with some default controls, initializes
        its state, and finds a script to define its behavior.

        Most templated devices need additional parameters, such as an address
        `addr`, frequency `freq`, bits per second `bps`, and length of the zeros
        between repetititions `zero_gap`. These should be specified in an object
        `properties` in the POST body.
      example: "A1"
      type: string
    location:
      example: Kitchen
      type: string
    actions:
      readOnly: true
      type: array
      example:
        - "TurnOn"
        - "TurnOff"
        - "TogglePower"
        - "SetSpeed"
        - "IncreaseSpeed"
        - "DecreaseSpeed"
    properties:
      readOnly: true
      type: object
      example:
        _: "84cd8a43"
    state:
      readOnly: true
      type: object
      example:
        _: "ad9bcde4"
    commands:
      readOnly: true
      type: object
      example:
        _: "ad9bcde4"
  required:
  - name
  - type

DeviceList:
  type: object
  example:
    _: "7fc1e84b"
    3b20f300:
        _: "9a5e1136"
    4caf6472:
        _: "409d124b"
State:
  example:
    breeze:
    - 1
    - 0.2
    - 0.9
    brightness: 75
    light: 1
    power: 0
    speed: 2
    timer: 3599

Properties:
  properties:
    trust_state:
      example: false
      type: boolean
      description: |
        Whether or not the Bond should trust its toggleable state belief.
        This is the confidence the Bond has that this device's state
        belief is accurate, and is only present if a "Toggle" command is present
        (for `power`, `light`, `direction`, etc.), and is `false` by default.
        (Bridge-only)
    addr:
      readOnly: true
      example: "10101"
      type: string
      description: (Bridge-only)
    freq:
      readOnly: true
      example: 434300
      type: integer
      description: (Bridge-only)
    bps:
      readOnly: true
      example: 3000
      type: integer
      description: (Bridge-only)
    zero_gap:
      readOnly: true
      example: 30
      type: integer
      description: (Bridge-only)

Bridge:
  properties:
    location:
      example: My Room
      type: string
    name:
      example: My Bridge
      type: string
    bluelight:
      example: 127
      type: int

RemoteAddr:
  properties:
    addr:
      example: ["dead", "0f2a", "0002", "0003"]
      type: array
      items:
        type: string
      description: |
        Learned remote address(es) in hexadecimal,
        may be patched only with a single address string to be added.
    addr_slots:
      example: 5
      type: integer
      readOnly: true
      description: |
        Maximum number of addresses which can be learned by this device.
        Typical values are 1 (for devices whose corresponding transmitters
        ship with DIP switches, allowing the user to manually put all
        transmitters on the same address) and 5 (for devices where each
        transmitter is shipped with a random address).
    learn_window_ms:
      example: 60000
      type: integer
      readOnly: true
      description: |
        Duration of learn window (milliseconds).
    learn_window_remaining_ms:
      example: 1100
      type: integer
      readOnly: true
      description: |
        Milliseconds remaining before learn window closes.
    learn_window_open:
      example: true
      type: boolean
      description: |
        Whether new address can be learned via RF.
        True iff learn_window_remaining_ms is nonzero.
    learn_count:
      example: 0
      type: integer
      readOnly: true
      description: |
        Number of times a new address has been learned on this boot.
        Useful in UI design to know that the learn process completed,
        even if the learned address is the same.
    addr0_is_dip:
      example: True
      type: boolean
      description: |
        If present and true, indicates that the receiver has DIP switches
        which may be adjusted to set the zeroth address.
